Q1. Write a Python program to find words which are greater than given length K?
ANS:```python
def find_words_greater_than_length(sentence, k):
words = sentence.split()
result = []

for word in words:
if len(word) > k:
result.append(word)

return result

# Example usage
sentence = "This is an example sentence to demonstrate the program."
k = 5

words_greater_than_k = find_words_greater_than_length(sentence, k)
print(f"Words greater than length {k}: {words_greater_than_k}")
```

Output:
```
Words greater than length 5: ['example', 'sentence', 'demonstrate', 'program.']
```

Q2.Write a Python program for removing i-th character from a string?
ANS:```python
def remove_character(s, i):
if i < or i >= len(s):
return "Invalid index"

return s[:i] + s[i+1:]

input_string = input("Enter a string: ")
index = int(input("Enter the index of the character to be removed: "))

result = remove_character(input_string, index)
print("Resulting string:", result)
```

Q3.Write a Python program to split and join a string?
ANS:# Split a string
string = "Hello, World!"
splitted_string = string.split(",") # Split the string at the comma
print(splitted_string) # Output: ['Hello', ' World!']

# Join a list of strings into one string
joined_string = "-".join(splitted_string) # Join the list with "-"
print(joined_string) # Output: Hello- World!

Q4. Write a Python to check if a given string is binary string or not?
ANS:```python
def is_binary_string(s):
for char in s:
if char != '' and char != '1':
return False
return True

# Test the function with some examples
print(is_binary_string("101010")) # Output: True
print(is_binary_string("101020")) # Output: False
```

Q5.Write a Python Program to find uncommon words from two strings?
ANS:```python
def find_uncommon_words(s1, s2):
words1 = s1.split()
words2 = s2.split()

uncommon_words = []

for word in words1:
if word not in words2 and word not in uncommon_words:
uncommon_words.append(word)

for word in words2:
if word not in words1 and word not in uncommon_words:
uncommon_words.append(word)

return uncommon_words

string1 = "I love to code"
string2 = "Python is my favorite language"

uncommon = find_uncommon_words(string1, string2)
print("Uncommon Words:", uncommon)
```

When you run this program, it will output:

```
Uncommon Words: ['I', 'love', 'to', 'code', 'Python', 'is', 'my', 'favorite', 'language']
```

Q6.Write a Python to find all duplicate characters in string?
ANS:```python
def find_duplicate_characters(input_string):
frequency = {}

# Count the frequency of each character in the input string
for char in input_string:
if char in frequency:
frequency[char] += 1
else:
frequency[char] = 1

# Find duplicate characters
duplicates = [char for char, count in frequency.items() if count > 1]

return duplicates

input_string = "hello"
print("Duplicate characters:", find_duplicate_characters(input_string))
```

When you run this script with the input string "hello", it will output:

```
Duplicate characters: ['l']
```

Q7.Write a Python program to check if a string contains any special character?
ANS:```python
import re

def check_special_character(input_string):
special_characters = re.compile('[@_!#$%^&*()<>?/\|}{~:]')
if special_characters.search(input_string) is not None:
return True
else:
return False

input_string = input("Enter a string: ")
if check_special_character(input_string):
print("String contains special characters.")
else:
print("String does not contain any special characters.")
```
